                  
				 1.	EXERCISE DATA QUERY LANGUAGE

1.List the Name and Designation code of the staff who have joined before Jan 2003 and whose salary range is between 12000 and 25000. 
	Display the columns with user defined Column headers.
	Hint: Use As clause along with other operators 
	
->	select staff_name as "Staff Name",design_code as"Designation Code" from staff_master
	where (hiredate < '01-jan-2003') and staff_sal between 12000 and 25000;
	
2. List the staff code, name, and department number of the staff who have experience of 18 or more years and sort them based on their experience.

->	select staff_code,staff_name,dept_code from staff_master
	where (months_between(sysdate,hiredate))>=216
	order by hiredate desc;
	
3.Display the staff details who do not have manager. 
	Hint: Use is null
	
->  select * from staff_master 
	where mgr_code is null;
	
4.Display the Book details that were published during the period of 2001 to 2004. 
	Also display book details with Book name having the character ‘&’ anywhere. 
	
->	select * from book_master
	where book_pub_year between 2001 and 2004 and book_name like '%&%';
	
5.List the names of the staff having ‘_’ character in their name.

->	select staff_name from staff_master
	where staff_name like '%\_%' escape "/";
	
	
	
	            2.1   EXERCISE SINGLE ROW FUNCTION

1.Create a query which will display Staff Name, Salary of each staff.
	Format the salary to be 15 characters long and left padded with ‘$’. 
	
->	select staff_name, '$' || staff_sal as Salary from staff_master;

2. Display name and date of birth of students where date of birth must be displayed in the format similar to “January, 12 1981” for those who were born on Saturday or Sunday.
	
->	select student_name , to_char(student_dob,'DY MONTH DD YYYY') as student_dob from student_master
	where TO_CHAR(student_dob,'DY') LIKE  ('%SAT%') or TO_CHAR(student_dob,'DY') LIKE  ('%SUN%') ;
	
3.Display each Staff name and number of months they worked for the organization.
	Label the column as ‘Months Worked’.
	Order your result by number of months employed.
	Also Round the number of months to closest whole number.
	
->  select staff_name, round(months_between(sysdate,hiredate)) as "Months Worked" from staff_master;

4.List the details of the staff who have joined in first half of December month (irrespective of the year).

->	select * from staff_master
	where  to_char(hiredate,'DD') between 1 and 15  and to_char(hiredate,'mon') like ('%dec%');
	
5. Write a query that displays Staff Name, Salary, and Grade of all staff. Grade depends on the following table.
	Salary               			 Grade
	Salary >=50000         			 A
	Salary >= 25000 < 50000			 B
	Salary>=10000 < 25000			 C
	OTHERS							 D

->	select staff_name,staff_sal,
	case 
		when staff_sal >= 50000 then 'A'
		when staff_sal >=25000 and staff_sal <50000 then 'B'
		when staff_sal >= 10000 and staff_sal < 25000 then 'C'
		else 'D'
	end 
	from staff_master;

	
6.Display the Staff Name, Hire date and day of the week on which staff was hired.
	Label the column as DAY. 
	Order the result by the day of the week starting with Monday.
	Hint :Use to_char with hiredate and formats ‘DY’ and ’D’	

->	select staff_name,(to_char(hiredate,'DY DD-mon-YYYY')) as day from staff_master
	order by to_char(hiredate,'DAY') asc;

7.Write a query to find the position of third occurrence of ‘i’ in the given word ‘Mississippi’.

->	select instr('Mississippi','i',2,3) from dual;

8. Write a query to find the pay date for the month. Pay date is the last Friday of the month.
	Display the date in the format “Twenty Eighth of January, 2002”.
	Label the heading as PAY DATE.
	Hint: use to_char, next_day and last_day functions
	
->  select to_char(next_day((last_day(sysdate))-7,'Friday'),'DDSPTH "of" MONTH,yyyy') as "Pay Date" from dual;

9. Display Student code, Name and Dept Name.
	Display “Electricals” if dept code = 20, “Electronics” if Dept code =30 and “Others” for all other Dept codes in the Dept Name column. 
	Hint : Use Decode
	
->	select student_code,student_name,dept_code,
	decode(
		dept_code ,
		20 ,'Electricals',
		30 ,'Electronics',
			'Others')
	result
	from student_master
	order by dept_code;
	
				2.2	GROUP FUNCTIONS
					
1. Display the Highest, Lowest, Total & Average salary of all staff.
	Label the columns Maximum, Minimum, Total and Average respectively for each Department code. 
	Also round the result to the nearest whole number. 
	
->	select dept_code,round(max(staff_sal)) as Maximum,round(min(staff_sal)) as Minimum, round(sum(staff_sal)) as Total,
	round(avg(staff_sal)) as Average from staff_master
	group by dept_code;

	
2.Display Department code and number of managers working in that department.
	Label the column as ‘Total Number of Managers’ for each department.  

->	select dept_code,count(mgr_code) as "Total Number of Managers" from staff_master
	group by dept_code;
	
3.Get the Department number, and sum of Salary of all non-managers where the sum is greater than 20000.
	
->  select deptno,sum(sal) as "Total" from emp 
	where job!='MANAGER'
	group by deptno 
	having sum(sal)>20000;

	

					3.	JOINS AND SUBQUERIES
					
1. Write a query which displays Staff Name, Department Code, Department Name, and Salary for all staff who earns more than 20000.

->	select staff_name,d.dept_code,d.dept_name,staff_sal from staff_master s
	inner join department_master d on s.dept_code=d.dept_code
	where staff_sal > 20000;
	
2.Display Staff Code, Staff Name, Department Name, and his manager’s number and name.
	Label the columns Staff#, Staff, Mgr#, Manager. 
	
->	select staff_code as Staff#,staff_name as Staff,d.dept_name ,s.mgr_code as Mgr# from staff_master s
	inner join department_master d on s.dept_code=d.dept_code ;
	
3.Create a query that will display Student Code, Student Name, Book Code, and Book Name for all students whose expected book return date is today.

->	select s.student_code,s.student_name,b.book_code,b.book_name from student_master s
	inner join book_transactions bt on s.student_code=bt.student_code
	inner join book_master b on bt.book_code=b.book_code
	where to_char(bt.book_expected_return_date,'DD-MM-YYYY') like to_char(sysdate,'DD-MM-YYYY');
	
4. Create a query that will display Staff Code, Staff Name, Department Name, Designation name, Book Code, Book Name, and Issue Date for only those staff who have taken any book in last 30 days. .
	If required, make changes to the table to create such a scenario.
 
->	select s.staff_code,s.staff_name,d.dept_name,de.design_name,b.book_code,b.book_name,bt.book_issue_date from department_master d
	inner join staff_master s on s.dept_code=d.dept_code
	inner join designation_master de on s.design_code=de.design_code
	inner join book_transactions bt on s.staff_code=bt.staff_code
	inner join book_master b on bt.book_code=b.book_code
	where  (sysdate-book_issue_date)<=30;
	
5.Generate a report which contains the following information.
	Staff Code, Staff Name, Designation Name, Department, Book Code, Book Name,
	Author, Fine For the staff who has not returned the book. Fine will be calculated as Rs. 5 per day.
	Fine = 5 * (No. of days = Current Date – Expected return date).
	Include records in the table to suit this problem statement
	
->	select s.staff_code,s.staff_name,d.dept_name,de.design_name,b.book_code,b.book_name,b.book_pub_author,	
	(round(sysdate - bt.book_expected_return_date) * 5) as fine from department_master d
	inner join staff_master s on s.dept_code=d.dept_code
	inner join designation_master de on s.design_code=de.design_code
	inner join book_transactions bt on s.staff_code=bt.staff_code
	inner join book_master b on bt.book_code=b.book_code;
	
6.List Staff Code, Staff Name, and Salary for those who are getting less than the average salary of organization.
 
->	select s.staff_code,s.staff_name,s.staff_sal from staff_master s
	where staff_sal<(select avg(s.staff_sal) from staff_master s);
	
7. Display Author Name, Book Name for those authors who wrote more than one book.

->	select book_pub_author,book_name from book_master
	where book_pub_author=(select book_pub_author from book_master 
	group by book_pub_author having count(book_pub_author)>1);

8.Display Staff Code, Staff Name, and Department Name for those who have taken more than one book.

->	select b.staff_code,s.staff_name,d.dept_name from staff_master s
	inner join department_master d on s.dept_code=d.dept_code
	inner join book_transactions b on s.staff_code=b.staff_code
	group by s.staff_code having count(s.staff_name)>1;
	
	
9.Display the Student Code, Student Name, and Department Name for that department in which there are maximum number of student studying.

->	select s.student_code,s.student_name,d.dept_name from student_master s
	inner join department_master d on s.dept_code=d.dept_code
	where d.dept_code in (select max(count(d.dept_code)) from student_master group by d.dept_code );
	
10.Display Staff Code, Staff Name, Department Name, and Designation name for those who have joined in last 3 months.

->	select s.staff_code,s.staff_name,d.dept_name,de.design_name from staff_master s
	inner join department_master d on s.dept_code=d.dept_code 
	inner join designation_master de on s.design_code=de.design_code 
	where 
	
11.Display the Manager Name and the total strength of his/her team.

->	select ep.ename ,count(*) as "Total Strength" from emp e
	inner join emp ep on e.mgr=ep.empno
	group by ep.empno,ep.ename;
	
12.Display the details of books that have not been returned and expected return date was last Monday. 
	Book name should be displayed in proper case..
	Hint: You can change /add records so that the expected return date suits this problem statement
	


13.Write a query to display number of people in each Department. 
	Output should display Department Code, Department Name and Number of People.

->	select d.dept_code,d.dept_name,count(s.staff_name) as "No of People" from department_master d
	inner join staff_master s on d.dept_code=s.dept_code
	group by d.dept_code,d.dept_name;
	
	
						4.	DATABASE OBJECTS

1. Create the Customer table with the following columns.
			CustomerId Number(5)
			Cust_Name varchar2(20)
			Address1 Varchar2(30)
			Address2 Varchar2(30)

->	CREATE TABLE Customer(
		customerId number(5),
		Cust_Name varchar2(20),
		Address1 varchar2(30),
		Address2 varchar2(30)
		);
	
2. Modify the Customer table Cust_Name column of datatype with Varchar2(30), rename the column to CustomerName and it should not accept Nulls.

->	alter table Customer 
		rename column Cust_name to CustomerName varchar2(30);
		alter table Customer 
		modify  CustomerName varchar2(30) not null;
	
3. a) Add the following Columns to the Customer table.
			Gender Varchar2(1)
			Age Number(3)
			PhoneNo Number(10)
			
->	 alter table Customer 
		add gender varchar2(1);
		alter table Customer
		add age number(3);
		alter table Customer
		add Phoneno number(10);
		
  b) Rename the Customer table to Cust_Table
  
->	alter table Customer
	rename to Cust_table;
	
4.Insert rows with the following data in to the Customer table.
	Insert into customer values: (1000, ‘Allen’, ‘#115 Chicago’, ‘#115 Chicago’, ‘M’, ‘25, 7878776’)
	In similar manner, add the below records to the Customer table:
	1001, George, #116 France, #116 France, M, 25, 434524
	1002, Becker, #114 New York, #114 New York, M, 45, 431525

->	insert into Cust_table 
		values (1000,'Allen','#115 Chicago','#115 Chicago','M',25,78787776);
	insert into Cust_table 
		values (1001,'George','#116 France','#116 France','M',25,434524);
	insert into Cust_table 
		values (1002,'Becker','#114 New YOrk','#114 New YOrk','M',45,431525);
	
5.Add the Primary key constraint for Customerld with the name Custld_Prim.

->	alter table Cust_table
		add constraints custId_Prim primary key(customerId);
	
6.Insert the row given below in the Customer table and see the message generated by the Oracle server.
	1002, John, #114 Chicago, #114 Chicago, M, 45, 439525
	
->	insert into Cust_table 
		values (1002,'John','#114 chicago','#114 chicago','M',45,439525);
	
	MESSAGE => unique constraint (SYSTEM.CUSTID_PRIM) violated
	
7.Disable the constraint on CustomerId, and insert the following data:
	1002, Becker, #114 New York, #114 New york , M, 45, 431525
	1003, Nanapatekar, #115 India, #115 India , M, 45, 431525 
	
->	alter table cust_table
		disable constraints custId_prim ;
		insert into Cust_table 
		values (1002,'Becker','#114 New YOrk','#114 New YOrk','M',45,431525);
		insert into Cust_table 
		values (1003,'Nanapatekar','#115 India','#115 India','M',45,431525);

8. Enable the constraint on CustomerId of the Customer table, and see the message generated by the Oracle server.

->	alter table cust_table
	enable constraints custId_prim ;
	
	MESSAGE=> ORA-02437: cannot validate (SYSTEM.CUSTID_PRIM) - primary key violated
	
9. Drop the constraint Custld_Prim on CustomerId and insert the following Data. Alter Customer table, drop constraint Custid_Prim.
	1002, Becker, #114 New York, #114 New york , M, 45, 431525, 15000.50
	1003, Nanapatekar, #115 India, #115 India , M, 45, 431525, 20000.50

->	ALTER TABLE Customer
	drop constraints CustId_prim;
	insert into Cust_table 
	values (1002,'Becker','#114 New YOrk','#114 New YOrk','M',45,431525,15000.50);
	insert into Cust_table 
	values (1003,'Nanapatekar','#115 India','#115 India','M',45,431525,20000.50);

10. Delete all the existing rows from Customer table, and let the structure remain itself using TRUNCATE statement.

->	truncate table cust_table;

11.In the Customer table, add a column E_mail.

->	alter table cust_table
	add E_mail varchar2(30);
	
12. Drop the E_mail column from Customer table.

->	alter table cust_table
	drop column E_mail;
	
13. Create the Suppliers table based on the structure of the Customer table.
	Include only the CustomerId, CustomerName, Address1, Address2, and phoneno columns.
	Name the columns in the new table as SuppID, SName, Addr1, Addr2, and Contactno respectively.

->	create table suppliers(
	SuppID number(5),
	SName varchar2(20),
	Addr1 varchar2(30),
	Addr2 varchar2(30),
	Contactno number(10)
	);
	
14. Drop the above table and recreate the following table with the name CustomerMaster.
		CustomerId Number(5) Primary key(Name of constraint is CustId_PK)
		CustomerName Varchar2(30) Not Null
		Addressl Varchar2(30) Not Null
		Address2 Varchar2(30)
		Gender Varchar2(l)
		Age Number(3)
		PhoneNo Number(10)

->	drop table suppliers;
	create table CustomerMaster(
	customerId number(5) constraints Custid_PK primary key,
	customerName varchar2(30) not null,
	Address1 varchar2(30) not null,
	Address2 varchar2(30),
	gender varchar2(1),
	age number(3),
	phoneNo number(10)
	);

15. Create the AccountsMaster table with the following Columns. 
	Use sequence to generate Account number
	Customerld Number(5)
	AccountNumber Number(10,2) Primary key(Name of constraint is Acc_PK)
	AccountType Char(3)
	LedgerBalance Number(10,2) Not Null
	
=>	Create table AccountsMaster(
	customerid number(5),
	Accountnumber number(10) constraints  Acc_Pk primary key,
	accounttype char(3),
	ledgerbalance number(10) Not Null
	);
	Create sequence seq_ano
		MINVALUE 101
		MAXVALUE 10000
		START WITH 101
		INCREMENT BY 1
		CACHE 101;

16. Relate AccountsMaster table and CustomerMaster table through Customerld column with the constraint name Cust_acc.

=>  Alter table AccountsMaster 
	ADD constraint ass_fk FOREIGN KEY(customerid) REFERENCES CustomerMaster(customerid);
	
17. Insert the following rows to the CustomerMaster table:
	1000, Allen, #115 Chicago, #115 Chicago, M, 25, 7878776
	1001, George, #116 France, #116 France, M, 25, 434524
	1002, Becker, #114 New York, #114 New York, M, 45, 431525

=>	insert all into CustomerMaster
	values(1000,'Allen', '#115 Chicago','#115 Chicago','M', 25, 7878776)
	into CustomerMaster
	values(1001, 'George','#116 France', '#116 France','M', 25, 434524)
	into CustomerMaster
	values(1002, 'Becker', '#114 New York', '#114 New York', 'M', 45, 431525)
	select * from dual;
	
18. Modify the AccountMaster table with the Check constraint to ensure AccountType should be either NRI or IND.

=>	alter table AccountsMaster 
	add constraint ck_ac check(accounttype='NRI' or accounttype='IND');
	
19. Modify the AccountsMaster table keeping a Check constraint 
	with the name Balance_Check for the Minimum Balance which should be greater than 5000.
	
=>	alter table AccountsMaster
	add constraints Balance_Check check(ledgerbalance > 5000);
	
20. Modify the AccountsMaster table such that if Customer is deleted from Customer 
	table then all his details should be deleted from AccountsMaster table
	
=>  //delete from AccountsMaster,Customer
	//where customerid=1001;
	
21. Create Backup copy for the AccountsMaster table with the name ‘AccountDetails’.

=>	Create table AccountDetails as select * from AccountsMaster;

22.	Create a view ‘Acc_view’ with columns Customerld, CustomerName, 
	AccountNumber, AccountType, and LedgerBalance from AccountsMaster.
	In the view Acc_view, the column names should be CustomerCode,
	AccountHolderName, AccountNumber, Type, and Balance for 
	the respective columns from AccountsMaster table.
	
=>	create view  "Acc_view" as
	select customerid as "CustomerId",accounttype as "Type",
	ledgerbalance as "Balance" from AccountsMaster;
	
	
23.	Create a view on AccountsMaster table with name vAccs_Dtls.
	 This view should list all customers whose AccountType is ‘IND’ 
	 and their balance amount should not be less than 10000. 
	 Using this view any DML operation should not violate the view conditions. 
	 
=>	CREATE VIEW vAccs_Dtls AS 
	SELECT 	Accounttype,ledgerbalance from Accountmaster 
	where (accounttype = 'IND' and ledgerbalance < 10000);
	
24.	Create a view accsvw10 which will not allow DML statement against it.

=>	create view "accsvw10" as
	select 
	
25.	Create a Sequence with the name Seq_Dept on Deptno column of 
	Department_Masters table. It should start from 40 and stop at 200. 
	Increment parameter for the sequence Seq_Dept should be in step of 10.
	
=>	create sequence Seq_dept 
	minvalue 40
	maxvalue 200
	start with 40
	increment by 10
	cache 40;
	
26.	Insert three sample rows by using the above sequence in Department_Masters table.

=>	create table Department_Master(
	deptno number(50),
	Dname varchar2(25),
	location varchar2(25)
	);
	insert into Department_Master 
	values(seq_dept.NEXTVAL,'MARKETING','NEW DELHI');
	insert into departmentmaster 
	values(seq_dept.NEXTVAL,'SALES','chennai');
	insert into departmentmaster 
	values(seq_dept.NEXTVAL,'RESEARCH','Gao');
	
27.	Drop the Seq_Dept sequence.

=>	drop sequence Seq_Dept;

28.	Get information on the index No_Name from the Data Dictionary.

=>	create index No_Name for emp(empno);

29.	Create synonym synEmp for the EMP table.

=>	create synonym synEmp for emp;
	
30.	Get Information on synonym synEmp from the Data Dictionary.

=>	select * from synEmp;

31.	Note: Perform this after creating the Employee Table 
	mentioned in the next Lab assignment. Create Index on HireDate 
	column and give the name as idx_emp_hiredate for this object.
	
=>	create index emp_HireDate for emp(HireDate);

32.	Create a Sequence with the name Seq_Emp on Empno column of Employee table. 
	It should start from 1001. Try to set Minimum value for this sequence 
	which is less than / greater than 1001, use the sequence to generate Empno
	while inserting records in Employee table and check the values generated.
	
=>	create sequence Seq_Emp 
	minvalue 1001
	start with 1001
	increment by 1
	cache 1001;
	
	
	
				5.	DATA MANIPULATION LANGUAGE
					
1.Create Employee table with same structure as EMP table.

->	Create table employee as select * from emp where 1=3;
	select * from employee;
	desc employee;

2.	Write a query to populate Employee table using EMP table’s empno, ename, sal, deptno columns.

->  insert all
	into employee(empno,ename,sal,deptno)
	values(7369,'SMITH',800,20)
	into employee(empno,ename,sal,deptno)
	values(7499,'ALLEN',160,30)
	into employee(empno,ename,sal,deptno)
	values(7521,'WARD',1250,30)
	into employee(empno,ename,sal,deptno)
	values(7566,'JONES',2975,20)
	into employee(empno,ename,sal,deptno)
	values(7654,'MARTIN',1250,30)
	into employee(empno,ename,sal,deptno)
	values(7698,'BLAKE',2850,30)
	into employee(empno,ename,sal,deptno)
	values(7782,'CLARK',2450,10)
	into employee(empno,ename,sal,deptno)
	values(7788,'SCOTT',3000,20)
	into employee(empno,ename,sal,deptno)
	values(7839,'KING',5000,10)
	into employee(empno,ename,sal,deptno)
	values(7844,'TURNER',1500,30)
	into employee(empno,ename,sal,deptno)
	values(7876,'ADAMS',1100,20)
	into employee(empno,ename,sal,deptno)
	values(7900,'JAMES',950,30)
	into employee(empno,ename,sal,deptno)
	values(7902,'FORD',3000,20)
	into employee(empno,ename,sal,deptno)
	values(7934,'MILLER',1300,10)
	select * from dual;

3.Write a query to change the job and deptno of employee whose empno is 7698 to the job and deptno of employee having empno 7788.
	
->  update employee 
	set job=(select job from employee
	where empno=7788),deptno=(select deptno 
	from employee where empno=7788)
	where empno=7698;

4.	Delete the details of department whose department name is ‘SALES’.

->	delete from department_master
	where dept_name like '%sales%';

5.Write a query to change the deptno of employee with empno 7788 to that of employee having empno 7698.

->	update employee
	set empno=7788
	where empno=7698;

6.Insert the following rows to the Employee table through parameter substitution.
 1000,Allen, Clerk,1001,12-jan-01, 3000, 2,10
 1001,George, analyst, null, 08 Sep 92, 5000,0, 10
 1002, Becker, Manager, 1000, 4 Nov 92, 2800,4, 20
 1003, 'Bill', Clerk, 1002, 4 Nov 92,3000, 0, 20
	
->  insert into employee 
	values (1000,'Allen', 'Clerk',1001,'12-jan-01', 3000, 2,10);
	insert into employee 
	values (1001,'George', 'analyst', null, '08 Sep 92', 5000,0, 10);
	insert into employee
	values (1002, 'Becker', 'Manager', 1000, '4 Nov 92', 2800,4, 20);
	insert into employee 
	values (1003, 'Bill', 'Clerk', 1002, '4 Nov 92',3000, 0, 20);					



						6.	TRANSACTION CONTROL LANGUAGE STATEMENT
							
1.Insert rows with the following data into the Customer table. 6000, John, #115 Chicago, #115 Chicago, M, 25, 7878776, 10000
 6001, Jack, #116 France, #116 France, M, 25, 434524, 20000
 6002, James, #114 New York, #114 New York, M, 45, 431525, 15000.50
Use parameter substitution.
	
->  select * from customer;
	insert all
	into customermaster
	values(6000,'John','#115 Chicago','#115 Chicago','M', 25, 7878776)
	into customermaster
	values(6001,'Jack','#116 France','#116 France','M', 25, 434524)
	into customermaster
	values(6002,'James','#114 New York','#114 New York','M', 45, 431525)
	select * from dual;
	desc customermaster;
	
2.Create a Savepoint named ‘SP1’ after third record in the Customer table .
	
->  savepoint sp1;

3.Insert the below row in the Customer table.
6003, John, #114 Chicago, #114 Chicago, M, 45, 439525, 19000.60	

->  insert into customermaster
	values(6003,'John','#114 Chicago','#114 Chicago','M',45,439525);

4.Execute rollback statement in such a way that whatever manipulations done before Savepoint sp1 are permanently implemented, and the ones after Savepoint SP1 are not stored as a part of the Customer table.
	
->  rollback sp1;							



							
	
	
	
	
	
	

